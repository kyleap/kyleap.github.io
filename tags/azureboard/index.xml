<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>AzureBoard on 凱哥打扣 | Kyle Studio</title>
    <link>https://kyleap.github.io/tags/azureboard/</link>
    <description>Recent content in AzureBoard on 凱哥打扣 | Kyle Studio</description>
    <image>
      <title>凱哥打扣 | Kyle Studio</title>
      <url>https://user-images.githubusercontent.com/8849818/227669578-aace96bd-bfb3-4cd5-9e52-52d8742ed597.jpg</url>
      <link>https://user-images.githubusercontent.com/8849818/227669578-aace96bd-bfb3-4cd5-9e52-52d8742ed597.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 05 Mar 2023 08:21:01 +0000</lastBuildDate><atom:link href="https://kyleap.github.io/tags/azureboard/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Product Owner 需維護好 Backlogs, 但怎麼判斷價值順序?</title>
      <link>https://kyleap.github.io/azure-boards-backlogs/</link>
      <pubDate>Sun, 05 Mar 2023 08:21:01 +0000</pubDate>
      
      <guid>https://kyleap.github.io/azure-boards-backlogs/</guid>
      <description>這是我在 .NET Conf Taiwan 2022 的演講 - 那些年用 Azure Boards 交付過的產品 以 5 個痛點來分享之前 Scurm 所遇到的問題，當時怎麼解決， 並將其整理成為文章版更難完整記錄本場的內容 Scrum Guide 說 Product Owner 需要依照價值排好 Backlogs，讓整個團隊可有穩定的節奏開發產品，但怎麼排序往往是個難題，有沒有一個框架可以參考?
https://uxdesign.cc/how-to-choose-your-product-prioritization-framework-ff0320d63ebf 的作者製作了一個框架提供參考
可以用兩個面向各字給 1-5 分來決定用哪種價值排序方式
 需給客戶驗證的程度: 需要在End User的參與下進行一定程度的數據收集或假設驗證練習來驗證程度，越密切分數越高 定性定量的程度: 需要更多的數據驗證，因素越多分數越高  透過這樣的兩個面向，可以初步選擇所使用的框架，本文以最 MoSCoW 及 WSJF 做舉例
MoSCoW MoSCoW是一種常用的優先順序法，用於將需求和功能分為四個類別：
 &amp;ldquo;M&amp;rdquo; 代表必需品（Must Have），這些功能或需求是關鍵的，必須在產品中實現，否則產品無法正常工作或無法交付。這些功能或需求通常是必要的核心功能或重要的業務需求。以我自己定義通常為 &amp;ldquo;沒有交付就不能達成商業目標&amp;rdquo; 的項目 &amp;ldquo;S&amp;rdquo; 代表應該品（Should Have），這些功能或需求是非常重要的，但不是必須的。如果有足夠的時間和資源，這些功能或需求應該被優先實現。 &amp;ldquo;C&amp;rdquo; 代表願望品（Could Have），這些功能或需求是可選的，通常是增強產品體驗或功能的選項。如果時間和資源允許，可以考慮實現這些功能或需求。 &amp;ldquo;W&amp;rdquo; 代表不需要品（Won’t Have），這些功能或需求是不必要的，不需要在產品中實現。這些功能或需求可能已被視為過時或不再需要。  當然，以上可以自己定義，目的為直覺得加速判斷，以我自己定義可以用以下方式來做收斂:
 Must Have: 沒有交付就不能達成商業目標 Should Have: 重要但短期有替代方案 Could Have: 不做沒關係，但做了能為產品帶來加分效果 Won’t Have: 就算做了有無助於提升產品價值  而 Azure Boards 可以怎麼做?</description>
    </item>
    
    <item>
      <title>以 Scrum 流程來看 Azure Boards 有哪些必裝的 Extensions 外掛</title>
      <link>https://kyleap.github.io/azure-board-extensions/</link>
      <pubDate>Mon, 27 Feb 2023 09:41:01 +0000</pubDate>
      
      <guid>https://kyleap.github.io/azure-board-extensions/</guid>
      <description>Scrum 353 Scrum Inc.創辦人 Jeff Sutherland 在他的書《Scrum: The Art of Doing Twice the Work in Half the Time》中提出的概念，它是 Scrum 框架的一種擴展，旨在幫助團隊更好地應對複雜性和不確定性。
裡面提到有個口訣 Scrum 353 的，它的核心概念是 &amp;ldquo;三個角色、五個事件、三個交付物&amp;rdquo;，其中：
 三個角色：產品負責人、開發團隊、Scrum Master 五個事件：Sprint、Sprint Planning、Daily Scrum、Sprint Review、Sprint Retrospective 三個工件：產品待辦清單、Sprint待辦清單、增量  在跑 Scrum 一直以來我都是用 Azure DevOps 來完成整個流程，但就像 JIRA 一樣，裝了一些外掛後會讓整個運作更順，此篇文章整理我在實務上推薦必裝的外掛
 此文章會不定期更新
 價值排序 WSJF (Weighted Shortest Job First
backlogs開始跟大海一樣，需要的是更多因素的評估，WSJF是一個考量 PMF 及開發成本的評估方式，此外掛可以自動計算出分數
Tags Manager
Tag 維護的好，可以用 Query 產生出更多的報表，此外掛可以用來維護已建立的 Tag
Multivalue control
如果想區別單子的Compoment，除了 Tag 外，也可以獨立用這種方式進行分類
SpecMap aka User Story Mapping</description>
    </item>
    
    <item>
      <title>在 Azure Board 建立 workitem template 加強團隊共識</title>
      <link>https://kyleap.github.io/azure-board-workitem-template/</link>
      <pubDate>Sat, 25 Feb 2023 15:41:01 +0000</pubDate>
      
      <guid>https://kyleap.github.io/azure-board-workitem-template/</guid>
      <description>前言 在 Scrum 的開發過程中，維護好 Work Items 是非常重要的一個步驟。這些 Work Items 會在Planning Meeting 或者是 Refine Meeting 被拿出來討論，如果內容定義不清，會導致討論會議的浪費，為了確保團隊在建立工作項目時有一致的認識和理解，以及在回顧過程中能夠更清楚地了解工作項目的緣由，此篇文章將介紹我在 Epic/Feature/User Story/Task 會寫的項目，以實際案例來分享，並簡單介紹如何在 Azure Board 裡面變成範本直接讓團隊套用
先來聊一下 Workitem 層級 在 Azure Devops 預設就有四種 Process 可以選，以目前 Agile 為大宗的開發模式，多半會選擇 Scurm/Agile，但這兩者基本上大同小異，如果要我一句話解讀這些 Item 代表的定義，我會這樣解釋:
 Epic: 高層老闆看的, 通常是公司的高大尚目標, 時間長度不超過1年 Feature: PM或主管看的, 把高大尚收斂後的具體策略, 時間長度以季為單位 User Story: PM/工程師看的, 達成策略的手段, 時間以1個sprint可交付為單位 Task: 工程師看的, 達成手段需要拆寫的實作, 時間以1-2天為單位  至於這些 Workitem 該寫什麼? 以下章節來細部說明
 我認為 Azure Devops 設計緣由可適用於大型組織，但導入需要逐步，也許小團隊可用 User Story+Task就可足夠了，太早一步到位反而會導致交付混亂
 Epic Epic 對我來講它代表了一個大型的、跨部門的產品目標，這個目標還沒有詳細的策略，也可以把它定義成是老闆的期望，也可以是 OKR 上層的指標，以 Product Owner 角度而言，我會思考如何傳達老闆的想法，並把它收斂成可量化的目標範圍，這會是一個半年不超過一年的時間長度，並需要有達成的指標，在標題上明確表達(e.</description>
    </item>
    
  </channel>
</rss>
