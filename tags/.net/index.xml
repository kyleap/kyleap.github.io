<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>.NET on 凱哥打扣 | Kyle Studio</title>
    <link>https://kyleap.github.io/tags/.net/</link>
    <description>Recent content in .NET on 凱哥打扣 | Kyle Studio</description>
    <image>
      <title>凱哥打扣 | Kyle Studio</title>
      <url>https://user-images.githubusercontent.com/8849818/227669578-aace96bd-bfb3-4cd5-9e52-52d8742ed597.jpg</url>
      <link>https://user-images.githubusercontent.com/8849818/227669578-aace96bd-bfb3-4cd5-9e52-52d8742ed597.jpg</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 23 Apr 2023 21:54:41 +0800</lastBuildDate>
    <atom:link href="https://kyleap.github.io/tags/.net/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在 .NET Core 使用 Feature Flag (Feature Toggle)</title>
      <link>https://kyleap.github.io/feature-flag-dotnet-core-basic/</link>
      <pubDate>Sun, 23 Apr 2023 21:54:41 +0800</pubDate>
      <guid>https://kyleap.github.io/feature-flag-dotnet-core-basic/</guid>
      <description>最近開發流程從 Gitflow 改為 Trunk-Based，讓每個 Feature 能很快速地回到主幹分支，但頻繁交付有時也不會想把新功能推出在使用者面前，所以這時候就能用 Feature Flag 來管理這些還沒有要發佈的功能，本篇文章記錄一下如何在 .NET Core 加入此功能，並講解一下目前實務上常規化的 Flag
Nuget 安裝 dotnet add package Microsoft.FeatureManagement.AspNetCore 加入 Feature Toggle public void ConfigureServices(IServiceCollection services) { // feature toggle services.AddFeatureManagement(); services.AddControllers(); services.AddSwaggerGen(c =&amp;gt; { c.SwaggerDoc(&amp;#34;v1&amp;#34;, new OpenApiInfo {Title = &amp;#34;FeatureFlagPoc.API&amp;#34;, Version = &amp;#34;v1&amp;#34;}); }); } 要使用時直接注入 private readonly IFeatureManager _featureManager; public WeatherForecastController(ILogger&amp;lt;WeatherForecastController&amp;gt; logger, IFeatureManager featureManager) { _logger = logger; _featureManager = featureManager; } 基本的 Feature Toggle 使用 var isFeatureAEnabled = await _featureManager.</description>
    </item>
    <item>
      <title>在 .NET Core 使用 Feature Flag (Feature Toggle) - 自訂邏輯</title>
      <link>https://kyleap.github.io/feature-flag-dotnet-core-basic-targeting/</link>
      <pubDate>Thu, 13 Apr 2023 21:30:41 +0800</pubDate>
      <guid>https://kyleap.github.io/feature-flag-dotnet-core-basic-targeting/</guid>
      <description>Feature Flag 是否開啟，也可以透過自訂的類別來撰寫，可以透過IFeatureFilter來實現，以下範例以取得使用者 User-Agent 為例
實作IFeatureFilter，新增一個 BrowserFeatureFilter.cs 檔案 [FilterAlias(&amp;#34;Browser&amp;#34;)] public class BrowserFeatureFilter : IFeatureFilter { private readonly IHttpContextAccessor _httpContextAccessor; public BrowserFeatureFilter(IHttpContextAccessor httpContextAccessor) { _httpContextAccessor = httpContextAccessor; } public Task&amp;lt;bool&amp;gt; EvaluateAsync(FeatureFilterEvaluationContext context) { // 取得Request的瀏覽器類型 var agent = _httpContextAccessor.HttpContext.Request.Headers[&amp;#34;User-Agent&amp;#34;].ToString(); // 取得 appSettings.json的設定 var settings = context.Parameters.Get&amp;lt;BrowserFilterSettings&amp;gt;(); // TODO: 這邊就可以撰寫邏輯驗證是否針對該瀏覽器開此功能 return Task.FromResult&amp;lt;bool&amp;gt;(false); } } public class BrowserFilterSettings { public string[] Allowed { get; set; } } appsettings.json (允許Edge瀏覽器開啟FeatureA功能) &amp;#34;FeatureManagement&amp;#34;: { &amp;#34;FeatureA&amp;#34;: { &amp;#34;EnabledFor&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;Browser&amp;#34;, &amp;#34;Parameters&amp;#34;: { &amp;#34;Allowed&amp;#34;: [ &amp;#34;Edg&amp;#34; ] } } ] } } startup 注入 services.</description>
    </item>
    <item>
      <title>在 .NET Core 使用 Feature Flag (Feature Toggle) - 針對受眾(targeting)</title>
      <link>https://kyleap.github.io/feature-flag-dotnet-core-basic-targeting/</link>
      <pubDate>Sun, 09 Apr 2023 22:32:41 +0800</pubDate>
      <guid>https://kyleap.github.io/feature-flag-dotnet-core-basic-targeting/</guid>
      <description>如果要針對某用戶或群組來開啟特定功能，在 .NET Feature Management 中可以用 TargetFilter 來指定
appsettings.json (指定當前使用者的Guid或群組) RolloutPercentage 為選擇性參數，可以指定多少百分比的使用者會導向該功能
&amp;#34;FeatureManagement&amp;#34;: { &amp;#34;FeatureA&amp;#34;: { &amp;#34;EnabledFor&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;Microsoft.Targeting&amp;#34;, &amp;#34;Parameters&amp;#34;: { &amp;#34;Audience&amp;#34;: { &amp;#34;Users&amp;#34;: [ &amp;#34;1948fcc1-dc03-44a6-824f-fb48166ffa9d&amp;#34; ], &amp;#34;Group&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;Group1&amp;#34;, &amp;#34;RolloutPercentage&amp;#34;: 80 }, { &amp;#34;Name&amp;#34;: &amp;#34;Group2&amp;#34; } ] } } } ] } } 實作 ITargetingContextAccessor public class TestTargetingContextAccessor : ITargetingContextAccessor { private const string TargetingContextLookup = &amp;#34;TestTargetingContextAccessor.TargetingContext&amp;#34;; private readonly IHttpContextAccessor _httpContextAccessor; public TestTargetingContextAccessor(IHttpContextAccessor httpContextAccessor) { _httpContextAccessor = httpContextAccessor ?</description>
    </item>
    <item>
      <title>在 .NET Core 使用 Feature Flag (Feature Toggle) - 時間控制</title>
      <link>https://kyleap.github.io/feature-flag-dotnet-core-basic-timewindow/</link>
      <pubDate>Sat, 01 Apr 2023 09:41:01 +0000</pubDate>
      <guid>https://kyleap.github.io/feature-flag-dotnet-core-basic-timewindow/</guid>
      <description>承接上一篇，如果有一些情境是限時開放的功能，時間過了以後就要關閉，那就可以用到 TimeWindow
appsettings.json &amp;#34;FeatureManagement&amp;#34;: { &amp;#34;FeatureB&amp;#34;: { &amp;#34;EnabledFor&amp;#34;: [ { &amp;#34;Name&amp;#34;: &amp;#34;Microsoft.TimeWindow&amp;#34;, &amp;#34;Parameters&amp;#34;: { &amp;#34;Start&amp;#34;: &amp;#34;2020-11-09 04:58:00Z&amp;#34;, &amp;#34;End&amp;#34;: &amp;#34;2099-11-09 05:00:00Z&amp;#34; } } ] } } 基本的 Feature Toggle 使用 var isFeatureAEnabled = await _featureManager.IsEnabledAsync(&amp;#34;FeatureA&amp;#34;); if(isFeatureAEnabled) { // 有打開，走新邏輯 } else { // 未打開，走舊邏輯 } API Route 多個使用方式，驗證不過會回傳404 [FeatureGate(&amp;#34;FeatureA&amp;#34;)] public async Task&amp;lt;ActionResult&amp;gt; Foo() { return Ok(result); } 也可指定任一或多個 Feature 是否有打開 [FeatureGate(requirementType: RequirementType.Any, &amp;#34;FeatureA&amp;#34;, &amp;#34;FeatureB&amp;#34;)] public async Task&amp;lt;ActionResult&amp;gt; Foo() { return Ok(result); } 也可以用 Enum 避免弱型別的typo [FeatureGate(MyFeatureFlags.</description>
    </item>
  </channel>
</rss>
